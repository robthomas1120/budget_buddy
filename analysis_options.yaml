# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  rules:
    # Disable rules that commonly cause yellow underlines in Flutter code
    prefer_const_constructors: false
    prefer_const_constructors_in_immutables: false
    prefer_const_literals_to_create_immutables: false
    use_key_in_widget_constructors: false
    avoid_function_literals_in_foreach_calls: false
    avoid_unnecessary_containers: false
    prefer_final_fields: false
    avoid_types_as_parameter_names: true  # Keep this enabled as it prevents real errors
    
    # Optional rules you might want to disable if causing warnings
    # lines_longer_than_80_chars: false
    # always_specify_types: false
    # prefer_typing_uninitialized_variables: false

analyzer:
  errors:
    # Reduce severity of specific warnings
    unused_local_variable: info
    deprecated_member_use: info
    # For additional rules
    invalid_use_of_protected_member: info
    unnecessary_null_comparison: info
    # Make missing required parameters an error (important to catch!)
    missing_required_param: error

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options